// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intergamm/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IntergammPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*IntergammPacketData_NoData
	//	*IntergammPacketData_IbcCreatePoolPacket
	Packet isIntergammPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *IntergammPacketData) Reset()         { *m = IntergammPacketData{} }
func (m *IntergammPacketData) String() string { return proto.CompactTextString(m) }
func (*IntergammPacketData) ProtoMessage()    {}
func (*IntergammPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee6c60a9abfe85e, []int{0}
}
func (m *IntergammPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntergammPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntergammPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntergammPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntergammPacketData.Merge(m, src)
}
func (m *IntergammPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IntergammPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IntergammPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IntergammPacketData proto.InternalMessageInfo

type isIntergammPacketData_Packet interface {
	isIntergammPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IntergammPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type IntergammPacketData_IbcCreatePoolPacket struct {
	IbcCreatePoolPacket *IbcCreatePoolPacketData `protobuf:"bytes,2,opt,name=ibcCreatePoolPacket,proto3,oneof" json:"ibcCreatePoolPacket,omitempty"`
}

func (*IntergammPacketData_NoData) isIntergammPacketData_Packet()              {}
func (*IntergammPacketData_IbcCreatePoolPacket) isIntergammPacketData_Packet() {}

func (m *IntergammPacketData) GetPacket() isIntergammPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *IntergammPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*IntergammPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *IntergammPacketData) GetIbcCreatePoolPacket() *IbcCreatePoolPacketData {
	if x, ok := m.GetPacket().(*IntergammPacketData_IbcCreatePoolPacket); ok {
		return x.IbcCreatePoolPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IntergammPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IntergammPacketData_NoData)(nil),
		(*IntergammPacketData_IbcCreatePoolPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee6c60a9abfe85e, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// IbcCreatePoolPacketData defines a struct for the packet payload
type IbcCreatePoolPacketData struct {
	Params             *PoolParams  `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Assets             []*PoolAsset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	FuturePoolGovernor string       `protobuf:"bytes,3,opt,name=futurePoolGovernor,proto3" json:"futurePoolGovernor,omitempty"`
}

func (m *IbcCreatePoolPacketData) Reset()         { *m = IbcCreatePoolPacketData{} }
func (m *IbcCreatePoolPacketData) String() string { return proto.CompactTextString(m) }
func (*IbcCreatePoolPacketData) ProtoMessage()    {}
func (*IbcCreatePoolPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee6c60a9abfe85e, []int{2}
}
func (m *IbcCreatePoolPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcCreatePoolPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcCreatePoolPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcCreatePoolPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcCreatePoolPacketData.Merge(m, src)
}
func (m *IbcCreatePoolPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IbcCreatePoolPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcCreatePoolPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IbcCreatePoolPacketData proto.InternalMessageInfo

func (m *IbcCreatePoolPacketData) GetParams() *PoolParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *IbcCreatePoolPacketData) GetAssets() []*PoolAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *IbcCreatePoolPacketData) GetFuturePoolGovernor() string {
	if m != nil {
		return m.FuturePoolGovernor
	}
	return ""
}

// IbcCreatePoolPacketAck defines a struct for the packet acknowledgment
type IbcCreatePoolPacketAck struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
}

func (m *IbcCreatePoolPacketAck) Reset()         { *m = IbcCreatePoolPacketAck{} }
func (m *IbcCreatePoolPacketAck) String() string { return proto.CompactTextString(m) }
func (*IbcCreatePoolPacketAck) ProtoMessage()    {}
func (*IbcCreatePoolPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee6c60a9abfe85e, []int{3}
}
func (m *IbcCreatePoolPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcCreatePoolPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcCreatePoolPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcCreatePoolPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcCreatePoolPacketAck.Merge(m, src)
}
func (m *IbcCreatePoolPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *IbcCreatePoolPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcCreatePoolPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_IbcCreatePoolPacketAck proto.InternalMessageInfo

func (m *IbcCreatePoolPacketAck) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*IntergammPacketData)(nil), "osmosislabs.osmosis.intergamm.IntergammPacketData")
	proto.RegisterType((*NoData)(nil), "osmosislabs.osmosis.intergamm.NoData")
	proto.RegisterType((*IbcCreatePoolPacketData)(nil), "osmosislabs.osmosis.intergamm.IbcCreatePoolPacketData")
	proto.RegisterType((*IbcCreatePoolPacketAck)(nil), "osmosislabs.osmosis.intergamm.IbcCreatePoolPacketAck")
}

func init() { proto.RegisterFile("intergamm/packet.proto", fileDescriptor_6ee6c60a9abfe85e) }

var fileDescriptor_6ee6c60a9abfe85e = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0xad, 0x84, 0xba, 0xbd, 0x6d, 0xa1, 0x86, 0x8a, 0xa1, 0x04, 0x84, 0x78, 0x70,
	0xa3, 0x15, 0xbc, 0x6a, 0xab, 0xa0, 0x45, 0x90, 0x92, 0xa3, 0x17, 0xd9, 0xc4, 0x58, 0x63, 0x9b,
	0x4e, 0xd8, 0xdd, 0x8a, 0xbe, 0x85, 0x8f, 0xe5, 0x41, 0xa4, 0x47, 0x8f, 0xd2, 0xbe, 0x88, 0xec,
	0x66, 0xab, 0xa2, 0xd5, 0x7a, 0xdb, 0xe1, 0x9f, 0xef, 0xcf, 0x3f, 0x93, 0xc1, 0xf5, 0x74, 0x24,
	0x13, 0xde, 0x67, 0x59, 0x16, 0xe4, 0x2c, 0x1e, 0x24, 0x92, 0xe6, 0x1c, 0x24, 0x90, 0x0d, 0x10,
	0x19, 0x88, 0x54, 0x0c, 0x59, 0x24, 0xa8, 0x79, 0xd3, 0x8f, 0xde, 0x46, 0xe3, 0x0b, 0x06, 0x30,
	0xbc, 0x64, 0x42, 0xcc, 0xd1, 0xc6, 0xfa, 0x37, 0x2d, 0x67, 0x9c, 0x65, 0xa2, 0x10, 0xbd, 0x67,
	0x84, 0x6b, 0xdd, 0xb9, 0xde, 0xd3, 0x5f, 0x3c, 0x66, 0x92, 0x91, 0x03, 0x6c, 0x8f, 0x40, 0xbd,
	0x1c, 0xd4, 0x44, 0x7e, 0xb5, 0xb5, 0x49, 0xff, 0x0c, 0x40, 0xcf, 0x75, 0xf3, 0xa9, 0x15, 0x1a,
	0x8c, 0xdc, 0xe2, 0x5a, 0x1a, 0xc5, 0x47, 0x3c, 0x61, 0x32, 0xe9, 0x01, 0x0c, 0x0b, 0x6f, 0xa7,
	0xa4, 0xdd, 0xf6, 0x97, 0xb8, 0x75, 0x7f, 0x92, 0xc6, 0x7e, 0x91, 0x69, 0xa7, 0x82, 0xed, 0x62,
	0x59, 0x5e, 0x05, 0xdb, 0x45, 0x12, 0xef, 0x05, 0xe1, 0xb5, 0x5f, 0x6c, 0x48, 0x5b, 0xf5, 0xab,
	0x25, 0x98, 0xe1, 0xb6, 0x96, 0xc4, 0x29, 0x70, 0x05, 0x84, 0x06, 0x24, 0x87, 0xd8, 0xd6, 0x3b,
	0x16, 0x4e, 0xa9, 0x59, 0xf6, 0xab, 0x2d, 0xff, 0x1f, 0x16, 0x6d, 0x05, 0x84, 0x86, 0x23, 0x14,
	0x93, 0xeb, 0xb1, 0x1c, 0x73, 0x1d, 0xee, 0x04, 0xee, 0x12, 0x3e, 0x02, 0xee, 0x94, 0x9b, 0xc8,
	0x5f, 0x0d, 0x17, 0x28, 0xde, 0x0e, 0xae, 0x2f, 0x98, 0xa7, 0x1d, 0x0f, 0x48, 0x1d, 0xdb, 0xea,
	0xc7, 0x76, 0xaf, 0xf4, 0x38, 0x2b, 0xa1, 0xa9, 0x3a, 0x67, 0x4f, 0x53, 0x17, 0x4d, 0xa6, 0x2e,
	0x7a, 0x9b, 0xba, 0xe8, 0x71, 0xe6, 0x5a, 0x93, 0x99, 0x6b, 0xbd, 0xce, 0x5c, 0xeb, 0x62, 0xb7,
	0x9f, 0xca, 0x9b, 0x71, 0x44, 0x63, 0xc8, 0x02, 0x93, 0x75, 0x5b, 0x05, 0x9f, 0x17, 0xc1, 0x7d,
	0xf0, 0x79, 0x34, 0xf2, 0x21, 0x4f, 0x44, 0x64, 0xeb, 0x7b, 0xd9, 0x7b, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0x33, 0x3d, 0x6b, 0x8c, 0xa1, 0x02, 0x00, 0x00,
}

func (m *IntergammPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntergammPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntergammPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IntergammPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntergammPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IntergammPacketData_IbcCreatePoolPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntergammPacketData_IbcCreatePoolPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcCreatePoolPacket != nil {
		{
			size, err := m.IbcCreatePoolPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IbcCreatePoolPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcCreatePoolPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcCreatePoolPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FuturePoolGovernor) > 0 {
		i -= len(m.FuturePoolGovernor)
		copy(dAtA[i:], m.FuturePoolGovernor)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.FuturePoolGovernor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IbcCreatePoolPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcCreatePoolPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcCreatePoolPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IntergammPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *IntergammPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *IntergammPacketData_IbcCreatePoolPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcCreatePoolPacket != nil {
		l = m.IbcCreatePoolPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IbcCreatePoolPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	l = len(m.FuturePoolGovernor)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *IbcCreatePoolPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPacket(uint64(m.PoolId))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntergammPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntergammPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntergammPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IntergammPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCreatePoolPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IbcCreatePoolPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IntergammPacketData_IbcCreatePoolPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcCreatePoolPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcCreatePoolPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcCreatePoolPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &PoolParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &PoolAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuturePoolGovernor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuturePoolGovernor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcCreatePoolPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcCreatePoolPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcCreatePoolPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
